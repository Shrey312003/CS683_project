#include "cache.h"

// ------------------------- DO NOT CHANGE -------------------------------- //
#define NUM_IP_TABLE_L1_ENTRIES 1024  // IP table entries
#define IP_TRACKER_COUNT 64           // Number of IP trackers
         // Prefetch degree
#define NUM_CSPT_TABLE_ENTRIES 1024
// ------------------------- DO NOT CHANGE -------------------------------- //

#define PHASE_LENGTH 10000             // Choose an appropriate phase length

int PREFETCH_DEGREE = 5;
int val = PHASE_LENGTH;
bool flag = 1;

uint64_t num_prefs = 0;               // To keep a track of the number of prefetched lines

// Track the accuracy of the different prefetchers
double accuracy_ip;
double accuracy_cplx;
double accuracy_nl;

#define IP_STRIDE 1                   // IP-Stride Prefetcher
#define CPLX 2                        // Complex-Stride Prefetcher
#define NL 3                          // Next-line Prefetcher
#define NO 4

uint16_t prefetcher = IP_STRIDE;      // Start with the IP-Stride Prefetcher

class IP_TRACKER {
   public:
    // ------------------------- Define the IP_TRACKER class here ------------------------- //
    uint64_t prev_addr;
    int prev_stride;
    int state; //state = 1 Initial, 2 transient, 3 steady
    uint64_t ip; 

    IP_TRACKER(){
        prev_addr = 0;
        prev_stride = 0;
        state = 0;
        ip = 0;
    }

    bool getState(uint64_t ip, uint64_t addr){

      uint64_t cl_prev_addr = prev_addr >> LOG2_BLOCK_SIZE;
      uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
      int stride = cl_addr - cl_prev_addr;

      if(stride == prev_stride){
          // if(state <= 2){
          //     state++;
          // }

          if(state == 1){
              state = 3;
          }

          else if(state == 2){
              state = 3;
          }

        //   else if(state == 4){
        //       state = 2;
        //   }
      }   

      else{
          if(state == 1){
              prev_stride = stride;
              state = 2;
          }

          else if(state == 2){
              prev_stride = stride;
              state = 1;
          }

        //   else if(state == 4){
        //       prev_stride = stride;
        //   }

          else if(state == 3){
              state = 1;
            //   prev_stride = 0;
              // prev_stride = stride;
          }
        }

        this->prev_addr = addr;

      return state==3;

    }

    void initialize_tracker(uint64_t addr, uint64_t ip){
      this->prev_addr = addr;
      this->ip = ip;
      this->prev_stride = 0;
      this->state = 1;
    }
    
};

IP_TRACKER trackers[IP_TRACKER_COUNT];

class IP_TABLE_CPLX {
  public:
    uint64_t ip_tag;
    uint64_t last_page;                 // last page seen by IP
    uint64_t last_cl_offset;            // last cl offset in the 4KB page
    int64_t last_stride;                // last delta observed
    uint16_t ip_valid;                  // valid IP or not   
    int conf;                           // CPLX conf
    uint16_t signature;                 // CPLX signature
    int stride;                         // Stride
    uint64_t prev_addr;

    IP_TABLE_CPLX () {
        ip_tag = 0;
        last_page = 0;
        last_cl_offset = 0;
        last_stride = 0;
        ip_valid = 0;
        signature = 0;
        conf = 0;
        stride = 0;
        prev_addr = 0;
    };
};

class CSPT_TABLE{
    public:
    int stride;
    int conf;

    CSPT_TABLE(){
        stride = 0;
        conf = 0;
    }
};

IP_TABLE_CPLX trackers_cplx[NUM_CPUS][NUM_IP_TABLE_L1_ENTRIES];
CSPT_TABLE cspts[NUM_CSPT_TABLE_ENTRIES];

// ------------------------- Updating the signature ---------------------------- // 
uint16_t update_sig_l1(uint16_t old_sig, int delta) {                           
    return (old_sig<<1)^(delta);
}

// ------------------- Updating confidence for the CPLX class ------------------ // 
int update_conf(int stride, int pred_stride, int conf) {
    if(stride == pred_stride){
        return std::max(conf+1,3);
    }

    else{
        return std::max(conf-1, 0);
    }
}

void update_cspt(uint16_t signature, int new_stride){
    int index = signature % NUM_CSPT_TABLE_ENTRIES;
    CSPT_TABLE* entry = &cspts[index];

    entry->stride = new_stride;
    entry->conf = 1;
}

// ------------------------- Initialize the prefetcher ------------------------- // 
void CACHE::l1d_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " L1D Optimized prefetcher" << endl;
    
}

uint64_t old_pref = 0;
uint64_t old_pf_lower = 0;

// --------------- This is the main prefetcher operate function ---------------- // 
void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;

    if (warmup_complete[0] == 1) {

        if(flag){
            val--;

            if(val == 0){
                if(prefetcher == IP_STRIDE){
                    accuracy_ip = (double)(pf_useful-old_pref)/(pf_lower_level-old_pf_lower);
                    prefetcher = CPLX;

                    old_pref = pf_useful;
                    old_pf_lower = pf_lower_level;
                    cout<<"IP "<<accuracy_ip<<"\n";
                }

                else if(prefetcher == CPLX){
                    accuracy_cplx = (double)(pf_useful-old_pref)/(pf_lower_level-old_pf_lower);
                    prefetcher = NL;

                    old_pref = pf_useful;
                    old_pf_lower = pf_lower_level;
                    cout<<"CPLX "<<accuracy_cplx<<"\n";
                }

                else if(prefetcher == NL){
                    accuracy_nl = (double)(pf_useful-old_pref)/(pf_lower_level-old_pf_lower);
                    prefetcher = NO;

                    old_pref = pf_useful;
                    old_pf_lower = pf_lower_level;
                    cout<<"NL "<<accuracy_nl<<"\n";
                }

                if(prefetcher==NO){
                    
                    if(accuracy_cplx > accuracy_ip && accuracy_cplx > accuracy_nl)
                        prefetcher = CPLX;
                    else if(accuracy_ip > accuracy_cplx && accuracy_ip > accuracy_nl)
                        prefetcher = IP_STRIDE;
                    else
                        prefetcher = NL;
                    
                    cout<<"TYPE " <<prefetcher<<"\n";

                    flag = 0;
                }

                val = PHASE_LENGTH;
            }
        }

        if (prefetcher == IP_STRIDE) {
            uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;

            bool state = false;

            IP_TRACKER* tracker = nullptr;

            uint64_t prev_addr ;

            uint64_t index = ip%64;


            if(ip == trackers[index].ip && trackers[index].state != 0){
                uint64_t prev_addr = trackers[index].prev_addr;
                state = trackers[index].getState(ip,addr);


                tracker = &trackers[index];
            }

            else{
                trackers[index].initialize_tracker(addr, ip);
            }

            if(state){
                uint64_t cl_prev_addr = prev_addr >> LOG2_BLOCK_SIZE;
                int new_stride = tracker->prev_stride;

                if(!flag){
                    if((double)pf_useless/pf_issued >= 0.2){
                        PREFETCH_DEGREE = std::max(1, PREFETCH_DEGREE-2);
                        cout<<PREFETCH_DEGREE<<"\n";
                    }
                    else{
                        PREFETCH_DEGREE = std::min(8, PREFETCH_DEGREE+2);
                        cout<<PREFETCH_DEGREE<<"\n";
                    }
                }
                for(int i=0;i<PREFETCH_DEGREE;i++){
                    uint64_t pf_address = (cl_addr + (((i+1)*new_stride))) << LOG2_BLOCK_SIZE;

                    // only issue a prefetch if the prefetch address is in the same 4 KB page
                    // as the current demand access address
                    if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                        break;
                        
                    prefetch_line(ip, addr, pf_address, FILL_L1, 0);
                }
            }
        
            return;
        }

        else if (prefetcher == CPLX) {
            uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;

            IP_TABLE_CPLX* tracker = &trackers_cplx[0][ip%NUM_IP_TABLE_L1_ENTRIES];

            if(tracker->ip_valid && ip == tracker->ip_tag){
                uint64_t cl_prev_addr = tracker->prev_addr >> LOG2_BLOCK_SIZE;

                int new_stride = cl_addr - cl_prev_addr;

                uint16_t sign = tracker->signature;

                CSPT_TABLE* cspt = &cspts[sign%NUM_CSPT_TABLE_ENTRIES];

                int pred_stride = cspt->stride;
                int conf = cspt->conf;

                int conf_val = update_conf(new_stride,pred_stride,conf);

                if(conf_val == 0){
                    update_cspt(sign, new_stride);
                }
                
                tracker->signature = update_sig_l1(sign, new_stride);

                if(conf_val>=2){

                    if(!flag){
                        if(data_evicting_data <= data_evicting_instr + data_evicting_transl){
                            PREFETCH_DEGREE = std::max(1, PREFETCH_DEGREE-2);
                        }
                        else{
                            PREFETCH_DEGREE = std::max(8, PREFETCH_DEGREE+2);
                        }
                    }
                    for(int i=0;i<PREFETCH_DEGREE;i++){

                        if(pred_stride != 0){
                            uint64_t pf_address = (cl_addr + (((i+1)*pred_stride))) << LOG2_BLOCK_SIZE;

                            // only issue a prefetch if the prefetch address is in the same 4 KB page
                            // as the current demand access address
                            if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                                break;

                            // cout<<pf_address<<"\n";
                                
                            prefetch_line(ip, addr, pf_address, FILL_L1, 0);
                        }
                        
                    }
                }

            }

            // --------------------- Add Complex-Stride pf_address logic here --------------------- // 

            // prefetch_line(ip, addr, pf_address, FILL_L1, 0);

            tracker->ip_tag = ip;
            tracker->prev_addr = addr;
            tracker->ip_valid = 1;

            return;

        }

        else if (prefetcher == NL) {

            if(!flag){
                if(data_evicting_data <= data_evicting_instr + data_evicting_transl){
                    PREFETCH_DEGREE = std::max(1, PREFETCH_DEGREE-2);
                }
                else{
                    PREFETCH_DEGREE = std::max(8, PREFETCH_DEGREE+2);
                }
            }
            for (int i=0; i<PREFETCH_DEGREE; i++) {
                uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;

                // ----------------------- Next-line logic ------------------------ // 
                uint64_t pf_address = (cl_addr + ((i+1))) << LOG2_BLOCK_SIZE;

                // only issue a prefetch if the prefetch address is in the same 4 KB page
                // as the current demand access address
                if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                    break;
                    
                prefetch_line(ip, addr, pf_address, FILL_L1, 0);
            }
            return;
        }
        else {
            assert(0);
        }
    }

	return;

}

// ------------------------- DO NOT CHANGE -------------------------------- //
void CACHE::l1d_prefetcher_notify_about_dtlb_eviction(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{
    
}

void CACHE::l1d_prefetcher_final_stats()
{
	cout << "CPU " << cpu << " L1D optimized prefetcher final stats" << endl;
	cout << "Degree: " << PREFETCH_DEGREE << endl;
}
// ------------------------- DO NOT CHANGE -------------------------------- //