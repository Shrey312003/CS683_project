#include "ooo_cpu.h"
#define PREFETCH_DEGREE 5

void O3_CPU::l1i_prefetcher_initialize() 
{
    cout << "CPU " << cpu << " L1D Next-line prefetcher" << endl;
}

void O3_CPU::l1i_prefetcher_branch_operate(uint64_t ip, uint8_t branch_type, uint64_t branch_target)
{
    return;
}

void O3_CPU::l1i_prefetcher_cache_operate(uint64_t v_addr, uint8_t cache_hit, uint8_t prefetch_hit)
{
    for (int i=0; i<PREFETCH_DEGREE; i++) {
        uint64_t line_addr = v_addr >> LOG2_BLOCK_SIZE;

        // ----------------------- Next-line logic ------------------------ // 
        uint64_t pf_address = (line_addr + ((i+1))) << LOG2_BLOCK_SIZE;

        // only issue a prefetch if the prefetch address is in the same 4 KB page
        // as the current demand access address
        // if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
        //     break;
            
        prefetch_code_line(pf_address);
    }
    return;
}

void O3_CPU::l1i_prefetcher_cycle_operate()
{

}

void O3_CPU::l1i_prefetcher_cache_fill(uint64_t v_addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_v_addr)
{
    return;
}

void O3_CPU::l1i_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " L1I Next line prefetcher final stats" << endl;
    cout << "Prefetch Degree:" << PREFETCH_DEGREE << endl;
}
