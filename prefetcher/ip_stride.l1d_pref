#include "cache.h"

// ------------------------- DO NOT CHANGE -------------------------------- //
#define IP_TRACKER_COUNT 64           // Number of IP trackers
#define PREFETCH_DEGREE 5             // Prefetch degree
// ------------------------- DO NOT CHANGE -------------------------------- //

class IP_TRACKER {
  public:
    // ------------------------- Define the IP_TRACKER class here ------------------------- //
    uint64_t prev_addr;
    int prev_stride;
    int state; //state = 1 Initial, 2 transient, 3 steady
    uint64_t ip; 

    IP_TRACKER(){
        prev_addr = 0;
        prev_stride = 0;
        state = 0;
        ip = 0;
    }

    bool getState(uint64_t ip, uint64_t addr){

      uint64_t cl_prev_addr = prev_addr >> LOG2_BLOCK_SIZE;
      uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
      int stride = cl_addr - cl_prev_addr;

      if(stride == prev_stride){
          // if(state <= 2){
          //     state++;
          // }

          if(state == 1){
              state = 3;
          }

          else if(state == 2){
              state = 3;
          }

        //   else if(state == 4){
        //       state = 2;
        //   }
      }   

      else{
          if(state == 1){
              prev_stride = stride;
              state = 2;
          }

          else if(state == 2){
              prev_stride = stride;
              state = 1;
          }

        //   else if(state == 4){
        //       prev_stride = stride;
        //   }

          else if(state == 3){
              state = 1;
            //   prev_stride = 0;
              // prev_stride = stride;
          }
        }

        this->prev_addr = addr;

      return state==3;

    }

    void initialize_tracker(uint64_t addr, uint64_t ip){
      this->prev_addr = addr;
      this->ip = ip;
      this->prev_stride = 0;
      this->state = 1;
    }
};

IP_TRACKER trackers[IP_TRACKER_COUNT];

// ------------------------- Initialize the prefetcher ------------------------- // 
void CACHE::l1d_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " L1D IP-based stride prefetcher" << endl;

}

// --------------- This is the main prefetcher operate function ---------------- // 
void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;

    bool state = false;

    IP_TRACKER* tracker = nullptr;

    uint64_t prev_addr ;

    uint64_t index = ip%64;


    if(ip == trackers[index].ip && trackers[index].state != 0){
        uint64_t prev_addr = trackers[index].prev_addr;
        state = trackers[index].getState(ip,addr);

        
        // cout<<index<<" "<<prev_addr<<" "<<addr<<" "<<addr-prev_addr<< "\n";

        tracker = &trackers[index];
    }

    else{
        trackers[index].initialize_tracker(addr, ip);
    }

    if(state){
        uint64_t cl_prev_addr = prev_addr >> LOG2_BLOCK_SIZE;
        int new_stride = tracker->prev_stride;

        for(int i=0;i<PREFETCH_DEGREE;i++){
            uint64_t pf_address = (cl_addr + (((i+1)*new_stride))) << LOG2_BLOCK_SIZE;

            // only issue a prefetch if the prefetch address is in the same 4 KB page
            // as the current demand access address
            if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                break;
                
             prefetch_line(ip, addr, pf_address, FILL_L1, 0);
        }
    }
   
    return;
}

// ------------------------- DO NOT CHANGE -------------------------------- //
void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{
	return;
}

void CACHE::l1d_prefetcher_final_stats()
{
	cout << "CPU " << cpu << " L1D IP-based stride prefetcher final stats" << endl;
	cout << "Degree: " << PREFETCH_DEGREE << endl;
}
// ------------------------- DO NOT CHANGE -------------------------------- //